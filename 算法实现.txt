### importance sub-sampling + mini batch zigzag process
### 算法实现
### 该文件中的内容是对论文算法的实现
###
### 以xi=(-1,-1,-1,-1,-1)为真值
### 总共500个观测x，x从混合分布(1-alpha)0 + alpha N(0,1) 中产生，其中alpha=0.1
### y是由xi真值的逻辑回归得到的，即p(y=1)=1/(1+exp(-x'*xi))
### 由此，我们有500个观测对(y,x)
### 采用论文算法improved sub-sampling zigzag process可以模拟得到xi的后验分布
###
### 本文件代码中，我们取xi=(20,20,20,20,20)为初始值，取N(0,10^10)为xi的先验分布
### improved sub-sampling zigzag process模拟xi的后验分布
###
### 下面是代码中可以修改的参数：
### xi真值=(-1,-1,-1,-1,-1)
### 维度p=5，观测n=500个，产生x的混合分布中alpha=0.1，产生x的混合分布中正态rnorm，
### xi初始值=(20,20,20,20,20)，xi先验分布正态sigma=10^5，
### zigzag跑k=10^5步，mini_batch大小B=5
###
### 注意，若修改维度p，则画图中plot的数量也要相应更改
###
### 该方法与普通zigzag不同之处已经分别注释在76，80，86行
### 
###
######################以下为代码部分#######################
set.seed(114514)
# x维度5，样本量500
p = 5
n = 500

# xi真值
xi_true <- rep(-1,p)

# x和y
# 混合分布(1-alpha)0 + alpha标准正态 ，alpha=0.1
alpha = 0.1
# 从混合分布中抽取500个x
x <- array( rnorm(p*n,0,1) ,dim=c(p,n))
a <- array( as.integer(runif(p*n,0,1) < alpha) ,dim=c(p,n))
x <- x*a
# 根据xi真值产生逻辑回归y
y <- as.integer( runif(n,0,1) < 1/(1+exp(-xi_true%*%x)) )

# xi先验初值
xi <- rep(20,p)
# xi先验分布为正态N(0,sigma^2)，sigma=10^5
sigma <- 10^5

# 函数定义
# 抽取反弹时间t，mi_o部分
generate_t_mi_o <- function(unif,xi){
  unif <- -log(unif)
  t <- (sqrt(unif+abs(xi))-sqrt(abs(xi)))*sqrt(2*sigma^2)
  return(t)
}
# 抽取反弹时间t，mi_*部分
generate_t_mi_ <- function(unif,x){
  unif <- -log(unif)
  t <- unif/rowSums(abs(x))
  return(t)
}
# rate函数mi_o
mi_o <- function(theta,xi,i){
  mi <- theta[i]*xi[i]/(sigma^2)
  return(max(0,mi))
}
# mi_o上界
Mi_o <- function(xi,i,t){
  Mi <- (abs(xi[i])+t)/sigma^2
  return(Mi)
}
# rate函数mi_*
mi_ <- function(theta,y,x,xi,i,B){
  mi <- 0
  for (b in 1:B){
    j <- sample(1:n,1,prob=abs(x[i,]))  # ,prob=abs(x[i,]) 和 等概 相互替换
    y_ <- y[j]
    x_ <- x[,j]
    mi_ <- x_[i]*exp(x_%*%xi)/(1+exp(x_%*%xi))-y_*x_[i]
    mi <- mi+sum(abs(x[i,]))/abs(x_[i])*mi_  # sum(abs(x[i,]))/abs(x_[i]) 和 n 替换
  }
  return(max(0,theta[i]*mi/B))
}
# mi_*上界
Mi_ <- function(x,i){
  return(sum(abs(x[i,])))  # sum(abs(x[i,])) 和 n*max(abs(x[i,])) 替换
}


# improved sub-sampling zigzag过程
# 跑k步
k = 10^5
# 初始值
xi_seq <- array(0,dim=c(p,k))
xi_seq[,1] <- xi
t_seq <- vector()
t_seq[1] <- 0

# theta初始值
theta <- rep(1,p)

# 算法参数mini_batch
B = 5

# zigzag
for (step in 2:k){
  t_prior <- generate_t_mi_o(runif(p,0,1),xi_seq[,step-1])
  t_condition <- generate_t_mi_(runif(p,0,1),x)
  i_p <- which.min(t_prior)
  i_c <- which.min(t_condition)
  if(t_prior[i_p]<t_condition[i_c]){
    i <- i_p
    t <- t_prior[i]
    # 更新序列
    t_seq[step] <- t_seq[step-1]+t
    xi_seq[,step] <- xi_seq[,step-1]+t*theta
    # 更新theta
    a <- runif(1,0,1)
    if(a < mi_o(theta,xi_seq[,step],i)/Mi_o(xi_seq[,step-1],i,t) ){
      theta[i] <- theta[i]*-1
    }
  }else{
    i <- i_c
    t <- t_condition[i]
    # 更新序列
    t_seq[step] <- t_seq[step-1]+t
    xi_seq[,step] <- xi_seq[,step-1]+t*theta
    # 更新theta
    a <- runif(1,0,1)
    if(a < mi_(theta,y,x,xi_seq[,step],i,B)/Mi_(x,i) ){
      theta[i] <- theta[i]*-1
    }
  }
}

# 画图
par(mfrow = c(2,3))
for (plot_i in 1:5){
  plot(xi_seq[plot_i,], type='l', xlab='step', ylab=paste('维度p=',as.character(plot_i)))
  abline(h=-1,col='red')
}
plot(t_seq, type='l', xlab='step', ylab='t')